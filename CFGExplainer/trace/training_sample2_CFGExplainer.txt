2023-05-08 13:52:19.263645: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcudart.so.11.0
2023-05-08 13:52:20.069240: I tensorflow/compiler/jit/xla_cpu_device.cc:41] Not creating XLA devices, tf_xla_enable_xla_devices not set
2023-05-08 13:52:20.069870: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcuda.so.1
2023-05-08 13:52:20.154206: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:941] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-05-08 13:52:20.154351: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1720] Found device 0 with properties: 
pciBusID: 0000:01:00.0 name: NVIDIA GeForce RTX 3080 Ti computeCapability: 8.6
coreClock: 1.83GHz coreCount: 80 deviceMemorySize: 11.75GiB deviceMemoryBandwidth: 849.46GiB/s
2023-05-08 13:52:20.154367: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcudart.so.11.0
2023-05-08 13:52:20.155760: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcublas.so.11
2023-05-08 13:52:20.155846: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcublasLt.so.11
2023-05-08 13:52:20.156511: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcufft.so.10
2023-05-08 13:52:20.156689: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcurand.so.10
2023-05-08 13:52:20.158248: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcusolver.so.10
2023-05-08 13:52:20.158617: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcusparse.so.11
2023-05-08 13:52:20.158720: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcudnn.so.8
2023-05-08 13:52:20.158774: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:941] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-05-08 13:52:20.158870: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:941] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-05-08 13:52:20.158932: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1862] Adding visible gpu devices: 0
2023-05-08 13:52:20.159941: I tensorflow/compiler/jit/xla_gpu_device.cc:99] Not creating XLA devices, tf_xla_enable_xla_devices not set
2023-05-08 13:52:20.160010: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:941] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-05-08 13:52:20.160085: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1720] Found device 0 with properties: 
pciBusID: 0000:01:00.0 name: NVIDIA GeForce RTX 3080 Ti computeCapability: 8.6
coreClock: 1.83GHz coreCount: 80 deviceMemorySize: 11.75GiB deviceMemoryBandwidth: 849.46GiB/s
2023-05-08 13:52:20.160097: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcudart.so.11.0
2023-05-08 13:52:20.160108: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcublas.so.11
2023-05-08 13:52:20.160114: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcublasLt.so.11
2023-05-08 13:52:20.160119: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcufft.so.10
2023-05-08 13:52:20.160123: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcurand.so.10
2023-05-08 13:52:20.160128: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcusolver.so.10
2023-05-08 13:52:20.160139: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcusparse.so.11
2023-05-08 13:52:20.160144: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcudnn.so.8
2023-05-08 13:52:20.160165: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:941] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-05-08 13:52:20.160229: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:941] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-05-08 13:52:20.160283: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1862] Adding visible gpu devices: 0
2023-05-08 13:52:20.160295: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcudart.so.11.0
2023-05-08 13:52:20.451436: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1261] Device interconnect StreamExecutor with strength 1 edge matrix:
2023-05-08 13:52:20.451477: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1267]      0 
2023-05-08 13:52:20.451481: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1280] 0:   N 
2023-05-08 13:52:20.451668: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:941] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-05-08 13:52:20.451809: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:941] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-05-08 13:52:20.451880: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:941] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-05-08 13:52:20.451977: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1406] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 10871 MB memory) -> physical GPU (device: 0, name: NVIDIA GeForce RTX 3080 Ti, pci bus id: 0000:01:00.0, compute capability: 8.6)
2023-05-08 13:58:43.178161: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcublas.so.11
2023-05-08 13:58:43.463589: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcublasLt.so.11
2023-05-08 13:58:43.505950: I tensorflow/stream_executor/cuda/cuda_blas.cc:1838] TensorFloat-32 will be used for the matrix multiplication. This will only be logged once.
sys.args:  ['exp_train_CFGExplainer.py', '32', 'data', '1024-512-128', '0.00001', 'GCNClassifier_', 'connlabcfg', '300', 'ep300_b32_elr00001_']
created Graph GCN model
+ loaded padded_train Benign
+ loaded padded_train Malware
+ gcn model: <util.models.GCN object at 0x7f8e1988ca00>
+ explainer model: <Explainer.ExplainerModule object at 0x7f796ed36970>
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ ep 0  acc = tf.Tensor(0.610375, shape=(), dtype=float32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ ep 1  acc = tf.Tensor(0.8865, shape=(), dtype=float32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ ep 2  acc = tf.Tensor(0.912125, shape=(), dtype=float32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ ep 3  acc = tf.Tensor(0.9115, shape=(), dtype=float32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ ep 4  acc = tf.Tensor(0.9185, shape=(), dtype=float32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ ep 5  acc = tf.Tensor(0.920125, shape=(), dtype=float32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ ep 6  acc = tf.Tensor(0.929125, shape=(), dtype=float32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP1() reshaped node mask:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
NN2 tf.shape(h): tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
NN2 tf.shape(h_flatten): tf.Tensor([  32 8192], shape=(2,), dtype=int32)
NN2 tf.shape(out): tf.Tensor([32  2], shape=(2,), dtype=int32)
+ MLP2 <tensor shapes>
+ embed: tf.Tensor([ 32 512 128], shape=(3,), dtype=int32)
+ importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ reshaped-importance: tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ h: tf.Tensor([ 32 512  16], shape=(3,), dtype=int32)
+ flattend h: tf.Tensor([  32 8192], shape=(2,), dtype=int32)
+ out: tf.Tensor([32  2], shape=(2,), dtype=int32)
+ call() node importance:  tf.Tensor([ 32 512   1], shape=(3,), dtype=int32)
+ call() out tf.Tensor([32  2], shape=(2,), dtype=int32)
+ ep 7  acc = tf.Tensor(0.932125, shape=(), dtype=float32)
Traceback (most recent call last):
  File "exp_train_CFGExplainer.py", line 171, in <module>
    print("sys.args: ", sys.argv)
  File "exp_train_CFGExplainer.py", line 162, in main
    # run explain code
  File "exp_train_CFGExplainer.py", line 91, in train_CFGExplainer
    mlflow.log_metric("train_acc", train_acc.numpy(), step = epoch)
  File "/home/ycchiu/anaconda3/envs/ycc3/lib/python3.8/site-packages/mlflow/tracking/fluent.py", line 646, in log_metric
    MlflowClient().log_metric(run_id, key, value, get_current_time_millis(), step or 0)
  File "/home/ycchiu/anaconda3/envs/ycc3/lib/python3.8/site-packages/mlflow/tracking/client.py", line 698, in log_metric
    self._tracking_client.log_metric(run_id, key, value, timestamp, step)
  File "/home/ycchiu/anaconda3/envs/ycc3/lib/python3.8/site-packages/mlflow/tracking/_tracking_service/client.py", line 286, in log_metric
    self.store.log_metric(run_id, metric)
  File "/home/ycchiu/anaconda3/envs/ycc3/lib/python3.8/site-packages/mlflow/store/tracking/file_store.py", line 900, in log_metric
    check_run_is_active(run_info)
  File "/home/ycchiu/anaconda3/envs/ycc3/lib/python3.8/site-packages/mlflow/entities/run_info.py", line 12, in check_run_is_active
    raise MlflowException(
mlflow.exceptions.MlflowException: The run 36087382c45944e7b8fb233c5d2f75d7 must be in 'active' lifecycle_stage.
Error in atexit._run_exitfuncs:
Traceback (most recent call last):
  File "/home/ycchiu/anaconda3/envs/ycc3/lib/python3.8/site-packages/mlflow/tracking/fluent.py", line 393, in end_run
    MlflowClient().set_terminated(run.info.run_id, status)
  File "/home/ycchiu/anaconda3/envs/ycc3/lib/python3.8/site-packages/mlflow/tracking/client.py", line 1538, in set_terminated
    self._tracking_client.set_terminated(run_id, status, end_time)
  File "/home/ycchiu/anaconda3/envs/ycc3/lib/python3.8/site-packages/mlflow/tracking/_tracking_service/client.py", line 485, in set_terminated
    self.store.update_run_info(
  File "/home/ycchiu/anaconda3/envs/ycc3/lib/python3.8/site-packages/mlflow/store/tracking/file_store.py", line 567, in update_run_info
    check_run_is_active(run_info)
  File "/home/ycchiu/anaconda3/envs/ycc3/lib/python3.8/site-packages/mlflow/entities/run_info.py", line 12, in check_run_is_active
    raise MlflowException(
mlflow.exceptions.MlflowException: The run 36087382c45944e7b8fb233c5d2f75d7 must be in 'active' lifecycle_stage.
